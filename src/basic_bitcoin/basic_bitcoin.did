type satoshi = nat64;

type millisatoshi_per_vbyte = nat64;

type bitcoin_address = text;

type transaction_id = text;

type block_hash = blob;

type network = variant {
    regtest;
    testnet;
    mainnet;
};

type BtcNetwork = variant {
    // The public Bitcoin mainnet.
    Mainnet;
    // The public Bitcoin testnet.
    Testnet;
    // A local Bitcoin regtest installation.
    Regtest;
};

type outpoint = record {
  txid : blob;
  vout : nat32
};

type utxo = record {
  outpoint: outpoint;
  value: satoshi;
  height: nat32;
};

type get_utxos_response = record {
  utxos: vec utxo;
  tip_block_hash: block_hash;
  tip_height: nat32;
  next_page: opt blob;
};

type Mode = variant {
    // The minter does not allow any state modifications.
    ReadOnly;
    // Only specified principals can modify minter's state.
    RestrictedTo : vec principal;
    // Only specified principals can deposit BTC to get SU$D.
    DepositsRestrictedTo : vec principal;
    // Anyone can interact with the minter.
    GeneralAvailability;
};

// The initialization parameters of the minter canister.
type InitArgs = record {
    // The minter will interact with this Bitcoin network.
    btc_network : BtcNetwork;

    // The principal of the Syron Ledger that handles SU$D transfers.
    // The default account of the Syron Minter must be configured as
    // the minting account of the ledger.
    ledger_id : principal;

    // The name of the ECDSA key to use.
    // E.g., "dfx_test_key" on the local replica.
    ecdsa_key_name : text;

    // The minimal amount of SU$D that can be used to unlock BTC.
    retrieve_btc_min_amount : nat64;

    /// Maximum time in nanoseconds that a transaction should spend in the queue
    /// before being sent.
    max_time_in_queue_nanos : nat64;

    /// The minimum number of confirmations required for the minter to
    /// accept a Bitcoin transaction.
    min_confirmations : opt nat32;

    /// The minter's operation mode.
    mode : Mode;

    /// The fee paid per check by the KYT canister.
    // kyt_fee : opt nat64;

    /// The canister id of the KYT canister.
    // kyt_principal: opt principal;
};

// The upgrade parameters of the Syron Minter canister.
type UpgradeArgs = record {
    // The minimal amount of SU$D that the minter requests to unlock BTC.
    retrieve_btc_min_amount : opt nat64;

    /// Maximum time in nanoseconds that a transaction should spend in the queue
    /// before being sent.
    max_time_in_queue_nanos : opt nat64;

    /// The minimum number of confirmations required for the minter to
    /// accept a Bitcoin transaction.
    min_confirmations : opt nat32;

    /// If set, overrides the current minter's operation mode.
    mode : opt Mode;

    /// The fee per check by the KYT canister.
    kyt_fee : opt nat64;

    /// The principal of the KYT canister.
    kyt_principal : opt principal;
};

type MinterArg = variant {
    Init : InitArgs;
    Upgrade : opt UpgradeArgs;
};

service : (network, MinterArg) -> {
    "get_p2pkh_address": () -> (bitcoin_address);

    "get_balance": (address: bitcoin_address) -> (satoshi);

    "get_utxos": (bitcoin_address) -> (get_utxos_response);

    "get_current_fee_percentiles": () -> (vec millisatoshi_per_vbyte);

    "send": (record {
      destination_address: bitcoin_address;
      amount_in_satoshi: satoshi;
    }) -> (transaction_id);

    // Returns the bitcoin address to which the user should send BTC
    // to get SU$D using the [update_balance] endpoint.
    //
    // If the owner is not set, it defaults to the caller's principal.
    "get_btc_address": (record {
      owner: opt principal;
      subaccount : opt blob
    }) -> (text);

}
